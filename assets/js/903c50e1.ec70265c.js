"use strict";(self.webpackChunkpaima_engine_docs=self.webpackChunkpaima_engine_docs||[]).push([[2180],{3773:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>r});var a=t(5893),l=t(1151);const o={},i="Avail block funnel",s={id:"home/state-machine/react-to-events/funnel-types/avail-block-funnel",title:"Avail block funnel",description:"An analogous to the evm block funnel, but for Avail.",source:"@site/docs/home/100-state-machine/300-react-to-events/3-funnel-types/800-avail-block-funnel.md",sourceDirName:"home/100-state-machine/300-react-to-events/3-funnel-types",slug:"/home/state-machine/react-to-events/funnel-types/avail-block-funnel",permalink:"/home/state-machine/react-to-events/funnel-types/avail-block-funnel",draft:!1,unlisted:!1,editUrl:"https://github.com/PaimaStudios/paima-engine-docs/tree/main/docs/home/100-state-machine/300-react-to-events/3-funnel-types/800-avail-block-funnel.md",tags:[],version:"current",sidebarPosition:800,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Avail Parallel funnel",permalink:"/home/state-machine/react-to-events/funnel-types/parallel-avail-funnel"},next:{title:"Midnight funnel",permalink:"/home/state-machine/react-to-events/funnel-types/midnight-funnel"}},c={},r=[{value:"Configuration",id:"configuration",level:2},{value:"Conceptually",id:"conceptually",level:2}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"avail-block-funnel",children:"Avail block funnel"}),"\n",(0,a.jsxs)(n.p,{children:["An analogous to the ",(0,a.jsx)(n.a,{href:"/home/state-machine/react-to-events/funnel-types/block-funnel",children:"evm block funnel"}),", but for Avail."]}),"\n",(0,a.jsx)(n.p,{children:"Note that there are two Avail funnels:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/home/state-machine/react-to-events/funnel-types/avail-block-funnel",children:"Avail block funnel"})," for when Avail is the main chain for your app"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/home/state-machine/react-to-events/funnel-types/parallel-avail-funnel",children:"Avail parallel funnel"})," for when a different chain is the main chain for your app, and you sync Avail in parallel for extra data"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"Avail:\n  type: avail-main\n  lightClient: 'http://localhost:7007'\n  rpc: ws://127.0.0.1:9944\n  funnelBlockGroupSize: 100\n  presyncStepSize: 1000\n  genesisHash: \"0xdd60847daa1119ecc9bdd006b140087737ac03d260ce110ecd7cb33cf721be35\"\n"})}),"\n",(0,a.jsx)(n.h2,{id:"conceptually",children:"Conceptually"}),"\n",(0,a.jsx)(n.p,{children:"This funnel will do the following:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["Get the latest block number with verified data availability from the Avail light client through the ",(0,a.jsx)(n.code,{children:"v2/status"})," endpoint. ",(0,a.jsx)(n.a,{href:"https://docs.availproject.org/docs/operate-a-node/run-a-light-client/light-client-api-reference#v2status",children:"Reference"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Fetch a group of ",(0,a.jsx)(n.code,{children:"funnelBlockGroupSize"})," headers (or less if we're already at the tip)."]}),"\n",(0,a.jsxs)(n.li,{children:["Fetch all the submitted data from the Avail light client through the ",(0,a.jsx)(n.code,{children:"v2/blocks/{block_number}/data"})," endpoint (",(0,a.jsx)(n.a,{href:"https://docs.availproject.org/docs/operate-a-node/run-a-light-client/light-client-api-reference#v2blocksblock_numberdatafieldsdataextrinsic",children:"reference"}),"). This means full blocks are never processed, because the light client can filter by app id."]}),"\n",(0,a.jsxs)(n.li,{children:["Use ",(0,a.jsx)(n.code,{children:"TextDecoder"})," to read the binary input as text, and continue with the Paima concise format processing."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Note that this means we download blocks from Avail ",(0,a.jsx)(n.em,{children:"even if"})," they are not related to our rollup, as we use the Avail blockchain as the clock for our application."]}),"\n",(0,a.jsx)(n.p,{children:"Here is a visual representation of the flow:"}),"\n",(0,a.jsx)(n.mermaid,{value:"stateDiagram-v2\n    [*] --\x3e RequestBlockNumber\n    \n    RequestBlockNumber: Request latest block number (<i>v2/status</i>)\n    \n    fork_state: fetch remote data for the next group of block numbers\n    RequestBlockNumber --\x3e fork_state\n    state fork_state <<fork>>\n\n    GetBlockHeaders: Get block headers (<i>v2/blocks/${block}/header</i>)\n\n    GetBlockData: Get block content (<i>v2/blocks/{block}/data</i>)\n\n    fork_state --\x3e GetBlockHeaders\n    fork_state --\x3e GetBlockData\n    \n    join_state: merge remote data together\n    state join_state <<join>>\n    \n    GetBlockHeaders --\x3e join_state\n    GetBlockData --\x3e join_state\n    \n    join_state --\x3e ProcessData\n    \n    ProcessData: Decode block data into rollup data format\n\n    ProcessData --\x3e FeedDataToSM\n    \n    FeedDataToSM: Feed data to user-specified state machine\n    \n    FeedDataToSM --\x3e [*]"})]})}function d(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var a=t(7294);const l={},o=a.createContext(l);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);